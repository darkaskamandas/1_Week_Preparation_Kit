using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'gridChallenge' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING_ARRAY grid as parameter.
     */

    public static string gridChallenge(List<string> grid)
    {
        var cnt = grid.Count;
            var sCnt = grid.ElementAt(0).Length;
            var orgChar = new char[cnt][];
            var invChar = new char[sCnt][];
            var res = "YES";
            for (int i = 0; i < cnt; i++)
            {
                orgChar[i] = grid.ElementAt(i).OrderBy(c => c).ToArray();
            }
            for (int j = 0; j < sCnt; j++)
            {
                invChar[j] = new char[cnt];
            }

            for (int i = 0; i < cnt; i++)
            {
                for (int j = 0; j < sCnt; j++)
                {
                    invChar[j][i] = orgChar[i][j];
                }
            }
            for (int i = 0; i < sCnt; i++)
            {
                var inv = invChar[i].OrderBy(c => c).ToArray();
                var org = invChar[i];
                for (int j = 0; j < cnt; j++)
                {
                    if (org[j] != inv[j])
                    {

                        return "NO";
                    }
                }
            }


            return res;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int t = Convert.ToInt32(Console.ReadLine().Trim());

        for (int tItr = 0; tItr < t; tItr++)
        {
            int n = Convert.ToInt32(Console.ReadLine().Trim());

            List<string> grid = new List<string>();

            for (int i = 0; i < n; i++)
            {
                string gridItem = Console.ReadLine();
                grid.Add(gridItem);
            }

            string result = Result.gridChallenge(grid);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
