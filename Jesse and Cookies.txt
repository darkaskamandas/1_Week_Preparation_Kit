using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

// .NET 6 will finally have a real, inbuilt PriorityQueue<TElement,TPriority>

// PriorityQueue code stolen from https://visualstudiomagazine.com/Articles/2012/11/01/Priority-Queues-with-C.aspx
public class PriorityQueue
{
    private List<int> data;

    public PriorityQueue()
    {
        this.data = new List<int>();
    }

    public void Enqueue(int item)
    {
        data.Add(item);
        int ci = data.Count - 1; // child index; start at end
        while (ci > 0)
        {
            int pi = (ci - 1) / 2; // parent index
            if (data[ci].CompareTo(data[pi]) >= 0) break; // child item is larger than (or equal) parent so we're done
            int tmp = data[ci]; data[ci] = data[pi]; data[pi] = tmp;
            ci = pi;
        }
    }

    public int Dequeue()
    {
        // assumes pq is not empty; up to calling code
        int li = data.Count - 1; // last index (before removal)
        int frontItem = data[0];   // fetch the front
        data[0] = data[li];
        data.RemoveAt(li);

        --li; // last index (after removal)
        int pi = 0; // parent index. start at front of pq
        while (true)
        {
            int ci = pi * 2 + 1; // left child index of parent
            if (ci > li) break;  // no children so done
            int rc = ci + 1;     // right child
            if (rc <= li && data[rc].CompareTo(data[ci]) < 0) // if there is a rc (ci + 1), and it is smaller than left child, use the rc instead
                ci = rc;
            if (data[pi].CompareTo(data[ci]) <= 0) break; // parent is smaller than (or equal to) smallest child so done
            int tmp = data[pi]; data[pi] = data[ci]; data[ci] = tmp; // swap parent and child
            pi = ci;
        }
    return frontItem;
    }

    public int Peek()
    {
        int frontItem = data[0];
        return frontItem;
    }

    public int Count => data.Count;

    public bool IsConsistent()
    {
      // is the heap property true for all data?
        if (data.Count == 0) return true;
        int li = data.Count - 1; // last index
        for (int pi = 0; pi < data.Count; ++pi) // each parent index
        {
            int lci = 2 * pi + 1; // left child index
            int rci = 2 * pi + 2; // right child index

            if (lci <= li && data[pi].CompareTo(data[lci]) > 0) return false; // if lc exists and it's greater than parent then bad.
            if (rci <= li && data[pi].CompareTo(data[rci]) > 0) return false; // check the right child too.
        }
        return true; // passed all checks
    } // IsConsistent
} // PriorityQueue


class Result
{
    // We want sweetness *greater* that sweetnessThreshold, not greater or equal!
    public static long cookies(int sweetnessThreshold, List<int> cookieList)
    {
        long mixingOperationCount = 0;
        var mixingQueue = new PriorityQueue();
        bool sweetEnoughCookieExists = false;

        for (int i = 0; i < cookieList.Count; i++)
        {
            if (cookieList[i] <= sweetnessThreshold)
            {
                mixingQueue.Enqueue(cookieList[i]);
            }
            else
            {
                sweetEnoughCookieExists = true;
            }
        }


        int worstCase;
        int secondWorst;
        long mixed;

        while (mixingQueue.Count >= 2)
        {
            worstCase = mixingQueue.Dequeue();
            secondWorst = mixingQueue.Dequeue();
            mixed = MixCookies(worstCase, secondWorst);
            mixingOperationCount++;

            if (mixed < sweetnessThreshold)
            {
                mixingQueue.Enqueue((int)mixed);
            }
            else
            {
                sweetEnoughCookieExists = true;
            }
        }

        if (mixingQueue.Count == 0)
        {
            return mixingOperationCount;
        }
        else if (mixingQueue.Count == 1 && sweetEnoughCookieExists)
        {
            // We need to mix once more
            return mixingOperationCount + 1;
        }
        else
        {
            return -1;
        }
    }

    private static long MixCookies(int sweetnessA, int sweetnessB)
    {
        const long firstMultiplier = 1L;
        const long secondMultiplier = 2L;

        return firstMultiplier * sweetnessA + secondMultiplier * sweetnessB;
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] firstMultipleInput = Console.ReadLine().TrimEnd().Split(' ');

        int n = Convert.ToInt32(firstMultipleInput[0]);

        int k = Convert.ToInt32(firstMultipleInput[1]);

        List<int> A = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(ATemp => Convert.ToInt32(ATemp)).ToList();

        long result = Result.cookies(k, A);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
